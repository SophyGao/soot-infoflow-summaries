<?xml version="1.0" ?><summary fileFormatVersion="101"><methods><method id="java.lang.Object poll()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="int size()"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object[] toArray()"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="int drainTo(java.util.Collection,int)"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Collection" gap="66"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Collection" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Collection"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Collection" gap="66"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="66" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="66"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object take()"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter&gt;]" AccessPathTypes="[java.util.concurrent.locks.Condition, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object element()"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="boolean addAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="void put(java.lang.Object)"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter&gt;]" AccessPathTypes="[java.util.concurrent.locks.Condition, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.String toString()"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;, &lt;java.lang.String: char[] value&gt;]" AccessPathTypes="[java.lang.Object[], char[]]"></from><to sourceSinkType="Return" BaseType="java.lang.String" AccessPath="[&lt;java.lang.String: char[] value&gt;]" AccessPathTypes="[char[]]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object peek()"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="java.util.Iterator iterator()"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ArrayBlockingQueue$Itr" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue$Itr: int remaining&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ArrayBlockingQueue$Itr" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0&gt;, &lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.ArrayBlockingQueue, java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ArrayBlockingQueue$Itr" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object nextItem&gt;]" AccessPathTypes="[java.lang.Object]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ArrayBlockingQueue$Itr" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0&gt;, &lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.ArrayBlockingQueue, java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ArrayBlockingQueue$Itr" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ArrayBlockingQueue$Itr" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0&gt;, &lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.ArrayBlockingQueue, java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="boolean isEmpty()"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object[] toArray(java.lang.Object[])"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="void clear()"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object remove()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="boolean retainAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="69"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="69"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="69" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int putIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int putIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="boolean offer(java.lang.Object)"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="boolean removeAll(java.util.Collection)"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int putIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int putIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="68"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="68"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="68" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow></flows></method><method id="boolean add(java.lang.Object)"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object poll(long,java.util.concurrent.TimeUnit)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.util.concurrent.TimeUnit"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.TimeUnit" gap="64"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter&gt;]" AccessPathTypes="[java.util.concurrent.locks.Condition, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.TimeUnit" gap="64"></from><to sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.util.concurrent.TimeUnit" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="long"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="long" gap="64" taintSubFields="true"></to></flow></flows></method><method id="int remainingCapacity()"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow></flows></method><method id="void &lt;init&gt;(int,boolean)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync]" taintSubFields="true"></to></flow></flows></method><method id="boolean remove(java.lang.Object)"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: int putIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="int drainTo(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Collection"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Collection" gap="65"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Collection" gap="65"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Collection" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="65"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="65" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="2" BaseType="java.util.concurrent.TimeUnit"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.TimeUnit" gap="63"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter&gt;]" AccessPathTypes="[java.util.concurrent.locks.Condition, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.TimeUnit" gap="63"></from><to sourceSinkType="Parameter" ParameterIndex="2" BaseType="java.util.concurrent.TimeUnit" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="long"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="long" gap="63" taintSubFields="true"></to></flow></flows></method><method id="boolean containsAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="67" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="67"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="67"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="boolean contains(java.lang.Object)"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync, int]" taintSubFields="true"></to></flow></flows></method><method id="void &lt;init&gt;(int)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;, &lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock, java.util.concurrent.locks.ReentrantLock$Sync]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ArrayBlockingQueue" AccessPath="[&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;]" AccessPathTypes="[java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject, java.util.concurrent.locks.ReentrantLock$Sync]" taintSubFields="true"></to></flow></flows></method></methods><gaps><gap num="64" id="&lt;java.util.concurrent.TimeUnit: long toNanos(long)&gt;"></gap><gap num="65" id="&lt;java.util.Collection: boolean add(java.lang.Object)&gt;"></gap><gap num="66" id="&lt;java.util.Collection: boolean add(java.lang.Object)&gt;"></gap><gap num="67" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap><gap num="68" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap><gap num="69" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap><gap num="63" id="&lt;java.util.concurrent.TimeUnit: long toNanos(long)&gt;"></gap></gaps></summary>