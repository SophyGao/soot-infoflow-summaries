<?xml version="1.0" ?><summary fileFormatVersion="101"><methods><method id="java.lang.Object poll()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object remove()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="boolean retainAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="59" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="59"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="59"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="59"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="59"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="59"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object[] toArray()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object element()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="boolean addAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="55"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="56"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="56"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="55"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.util.Iterator" gap="54"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="55"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Collection"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Collection" gap="54"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Collection" gap="54"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Collection" taintSubFields="true"></to></flow></flows></method><method id="boolean removeAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="58"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="58"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="58"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="58" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="58"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="58"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.String toString()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;, &lt;java.lang.String: char[] value&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object, char[]]"></from><to sourceSinkType="Return" BaseType="java.lang.String" AccessPath="[&lt;java.lang.String: char[] value&gt;]" AccessPathTypes="[char[]]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object peek()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="java.util.Iterator iterator()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentLinkedQueue$Itr" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node nextNode&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentLinkedQueue$Itr" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue this$0&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentLinkedQueue$Itr" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object nextItem&gt;]" AccessPathTypes="[java.lang.Object]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object[] toArray(java.lang.Object[])"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow></flows></method><method id="boolean containsAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="57"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="57" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="57"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="57"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="57"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentLinkedQueue" AccessPath="[&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;, &lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentLinkedQueue$Node, java.lang.Object]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="57"></to></flow></flows></method></methods><gaps><gap num="54" id="&lt;java.util.Collection: java.util.Iterator iterator()&gt;"></gap><gap num="55" id="&lt;java.util.Iterator: boolean hasNext()&gt;"></gap><gap num="56" id="&lt;java.util.Iterator: java.lang.Object next()&gt;"></gap><gap num="57" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap><gap num="58" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap><gap num="59" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap></gaps></summary>