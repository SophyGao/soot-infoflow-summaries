<?xml version="1.0" ?><summary fileFormatVersion="101"><methods><method id="java.util.Enumeration elements()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector"></from><to sourceSinkType="Return" BaseType="java.util.Vector$1" AccessPath="[&lt;java.util.Vector$1: java.util.Vector this$0&gt;]" AccessPathTypes="[java.util.Vector]" taintSubFields="true"></to></flow></flows></method><method id="java.util.ListIterator listIterator()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.AbstractList"></from><to sourceSinkType="Return" BaseType="java.util.AbstractList$SimpleListIterator" AccessPath="[&lt;java.util.AbstractList$SimpleListIterator: java.util.AbstractList this$0&gt;]" AccessPathTypes="[java.util.AbstractList]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.AbstractList" AccessPath="[&lt;java.util.AbstractList: int modCount&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.util.AbstractList$SimpleListIterator" AccessPath="[&lt;java.util.AbstractList$SimpleListIterator: int expectedModCount&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.AbstractList"></from><to sourceSinkType="Return" BaseType="java.util.AbstractList$FullListIterator" AccessPath="[&lt;java.util.AbstractList$FullListIterator: java.util.AbstractList this$0&gt;]" AccessPathTypes="[java.util.AbstractList]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object lastElement()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="java.util.List subList(int,int)"><flows><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="int"></from><to sourceSinkType="Return" BaseType="java.util.Collections$SynchronizedList" AccessPath="[&lt;java.util.Collections$SynchronizedList: java.util.List list&gt;, &lt;java.util.AbstractList$SubAbstractList: int size&gt;]" AccessPathTypes="[java.util.AbstractList$SubAbstractList, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="int"></from><to sourceSinkType="Return" BaseType="java.util.Collections$SynchronizedList" AccessPath="[&lt;java.util.Collections$SynchronizedList: java.util.List list&gt;, &lt;java.util.AbstractList$SubAbstractList: int offset&gt;]" AccessPathTypes="[java.util.AbstractList$SubAbstractList, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.AbstractList" AccessPath="[&lt;java.util.AbstractList: int modCount&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.util.Collections$SynchronizedList" AccessPath="[&lt;java.util.Collections$SynchronizedList: java.util.List list&gt;, &lt;java.util.AbstractList: int modCount&gt;]" AccessPathTypes="[java.util.AbstractList$SubAbstractList, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="int"></from><to sourceSinkType="Return" BaseType="java.util.Collections$SynchronizedCollection" AccessPath="[&lt;java.util.Collections$SynchronizedCollection: java.util.Collection c&gt;, &lt;java.util.AbstractList$SubAbstractList: int size&gt;]" AccessPathTypes="[java.util.AbstractList$SubAbstractList, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector"></from><to sourceSinkType="Return" BaseType="java.util.Collections$SynchronizedCollection" AccessPath="[&lt;java.util.Collections$SynchronizedCollection: java.lang.Object mutex&gt;]" AccessPathTypes="[java.util.Vector]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="int"></from><to sourceSinkType="Return" BaseType="java.util.Collections$SynchronizedList" AccessPath="[&lt;java.util.Collections$SynchronizedList: java.util.List list&gt;, &lt;java.util.AbstractList$SubAbstractList: int size&gt;]" AccessPathTypes="[java.util.AbstractList$SubAbstractList, int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="int"></from><to sourceSinkType="Return" BaseType="java.util.Collections$SynchronizedCollection" AccessPath="[&lt;java.util.Collections$SynchronizedCollection: java.util.Collection c&gt;, &lt;java.util.AbstractList$SubAbstractList: int offset&gt;]" AccessPathTypes="[java.util.AbstractList$SubAbstractList, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector"></from><to sourceSinkType="Return" BaseType="java.util.Collections$SynchronizedCollection" AccessPath="[&lt;java.util.Collections$SynchronizedCollection: java.util.Collection c&gt;, &lt;java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList&gt;]" AccessPathTypes="[java.util.AbstractList$SubAbstractList, java.util.Vector]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.AbstractList" AccessPath="[&lt;java.util.AbstractList: int modCount&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.util.Collections$SynchronizedCollection" AccessPath="[&lt;java.util.Collections$SynchronizedCollection: java.util.Collection c&gt;, &lt;java.util.AbstractList: int modCount&gt;]" AccessPathTypes="[java.util.AbstractList$SubAbstractList, int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector"></from><to sourceSinkType="Return" BaseType="java.util.Collections$SynchronizedList" AccessPath="[&lt;java.util.Collections$SynchronizedList: java.util.List list&gt;, &lt;java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList&gt;]" AccessPathTypes="[java.util.AbstractList$SubAbstractList, java.util.Vector]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="int"></from><to sourceSinkType="Return" BaseType="java.util.Collections$SynchronizedCollection" AccessPath="[&lt;java.util.Collections$SynchronizedCollection: java.util.Collection c&gt;, &lt;java.util.AbstractList$SubAbstractList: int size&gt;]" AccessPathTypes="[java.util.AbstractList$SubAbstractList, int]" taintSubFields="true"></to></flow></flows></method><method id="int size()"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: int elementCount&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow></flows></method><method id="boolean addAll(int,java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Collection" gap="181"></from><to sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.util.Collection" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="183"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.util.Collection"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Collection" gap="180"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Collection" gap="180"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Collection" gap="181"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.util.Iterator" gap="181"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="182"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Collection" gap="180"></from><to sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.util.Collection" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="183"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="182"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="182"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="183"></to></flow><flow isAlias="false"><from sourceSinkType="Return" BaseType="int" gap="180"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: int elementCount&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object[] toArray()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow></flows></method><method id="boolean equals(java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.util.Iterator" gap="193"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="194"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="196"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.List" gap="192"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.List" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="195"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="196" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="196"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.List" gap="192"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.List" gap="193"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="193"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="195"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="194"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="194"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="195"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="192"></to></flow></flows></method><method id="int capacity()"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow></flows></method><method id="boolean addAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="187"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="186"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="186"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="187"></to></flow><flow isAlias="false"><from sourceSinkType="Return" BaseType="int" gap="184"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: int elementCount&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Collection"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Collection" gap="184"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.util.Iterator" gap="185"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="186"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Collection" gap="184"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Collection" gap="185"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="187"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Collection" gap="184"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Collection" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object firstElement()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object remove(int)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="java.lang.String toString()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="199"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="199"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.String" AccessPath="[&lt;java.lang.String: char[] value&gt;]" AccessPathTypes="[char[]]" gap="199"></from><to sourceSinkType="Return" BaseType="java.lang.String" AccessPath="[&lt;java.lang.String: char[] value&gt;]" AccessPathTypes="[char[]]" taintSubFields="true"></to></flow></flows></method><method id="void addElement(java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow></flows></method><method id="void setElementAt(java.lang.Object,int)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow></flows></method><method id="java.util.ListIterator listIterator(int)"><flows><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="int"></from><to sourceSinkType="Return" BaseType="java.util.AbstractList$FullListIterator" AccessPath="[&lt;java.util.AbstractList$SimpleListIterator: int pos&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.AbstractList"></from><to sourceSinkType="Return" BaseType="java.util.AbstractList$FullListIterator" AccessPath="[&lt;java.util.AbstractList$FullListIterator: java.util.AbstractList this$0&gt;]" AccessPathTypes="[java.util.AbstractList]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.AbstractList" AccessPath="[&lt;java.util.AbstractList: int modCount&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.util.AbstractList$SimpleListIterator" AccessPath="[&lt;java.util.AbstractList$SimpleListIterator: int expectedModCount&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.AbstractList"></from><to sourceSinkType="Return" BaseType="java.util.AbstractList$SimpleListIterator" AccessPath="[&lt;java.util.AbstractList$SimpleListIterator: java.util.AbstractList this$0&gt;]" AccessPathTypes="[java.util.AbstractList]" taintSubFields="true"></to></flow></flows></method><method id="java.util.Iterator iterator()"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.AbstractList" AccessPath="[&lt;java.util.AbstractList: int modCount&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.util.AbstractList$SimpleListIterator" AccessPath="[&lt;java.util.AbstractList$SimpleListIterator: int expectedModCount&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.AbstractList"></from><to sourceSinkType="Return" BaseType="java.util.AbstractList$SimpleListIterator" AccessPath="[&lt;java.util.AbstractList$SimpleListIterator: java.util.AbstractList this$0&gt;]" AccessPathTypes="[java.util.AbstractList]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object[] toArray(java.lang.Object[])"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: int elementCount&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: int elementCount&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow></flows></method><method id="int indexOf(java.lang.Object,int)"><flows><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="int"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object clone()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow></flows></method><method id="boolean retainAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Collection"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Collection" gap="198"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.AbstractList" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="198" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="198"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow></flows></method><method id="void add(int,java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.lang.Object"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object set(int,java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.lang.Object"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.lang.Object"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow></flows></method><method id="void insertElementAt(java.lang.Object,int)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow></flows></method><method id="int lastIndexOf(java.lang.Object,int)"><flows><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="int"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow></flows></method><method id="void copyInto(java.lang.Object[])"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow></flows></method><method id="int lastIndexOf(java.lang.Object)"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: int elementCount&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow></flows></method><method id="boolean removeAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Collection"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Collection" gap="197"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.AbstractList" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="197" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="197"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Collection" gap="197"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Collection" taintSubFields="true"></to></flow></flows></method><method id="boolean add(java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow></flows></method><method id="void setSize(int)"><flows><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="int"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: int elementCount&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object get(int)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object elementAt(int)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="void ensureCapacity(int)"><flows><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="int" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: int capacityIncrement&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="int" taintSubFields="true"></to></flow></flows></method><method id="boolean containsAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.util.Iterator" gap="188"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="189"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Collection"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Collection" gap="188"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="190"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="191"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="189"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="190"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="191" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="191"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: java.lang.Object[] elementData&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="190"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="189"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Collection" gap="188"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Collection" taintSubFields="true"></to></flow></flows></method><method id="void removeRange(int,int)"><flows><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="int"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: int elementCount&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="false"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="int"></from><to sourceSinkType="Field" BaseType="java.util.Vector" AccessPath="[&lt;java.util.Vector: int elementCount&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow></flows></method></methods><gaps><gap num="192" id="&lt;java.util.List: int size()&gt;"></gap><gap num="193" id="&lt;java.util.List: java.util.Iterator iterator()&gt;"></gap><gap num="194" id="&lt;java.util.Iterator: boolean hasNext()&gt;"></gap><gap num="195" id="&lt;java.util.Iterator: java.lang.Object next()&gt;"></gap><gap num="196" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap><gap num="197" id="&lt;java.util.Collection: boolean contains(java.lang.Object)&gt;"></gap><gap num="198" id="&lt;java.util.Collection: boolean contains(java.lang.Object)&gt;"></gap><gap num="199" id="&lt;java.lang.Object: java.lang.String toString()&gt;"></gap><gap num="180" id="&lt;java.util.Collection: int size()&gt;"></gap><gap num="181" id="&lt;java.util.Collection: java.util.Iterator iterator()&gt;"></gap><gap num="182" id="&lt;java.util.Iterator: boolean hasNext()&gt;"></gap><gap num="183" id="&lt;java.util.Iterator: java.lang.Object next()&gt;"></gap><gap num="184" id="&lt;java.util.Collection: int size()&gt;"></gap><gap num="185" id="&lt;java.util.Collection: java.util.Iterator iterator()&gt;"></gap><gap num="186" id="&lt;java.util.Iterator: boolean hasNext()&gt;"></gap><gap num="187" id="&lt;java.util.Iterator: java.lang.Object next()&gt;"></gap><gap num="188" id="&lt;java.util.Collection: java.util.Iterator iterator()&gt;"></gap><gap num="189" id="&lt;java.util.Iterator: boolean hasNext()&gt;"></gap><gap num="190" id="&lt;java.util.Iterator: java.lang.Object next()&gt;"></gap><gap num="191" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap></gaps></summary>