<?xml version="1.0" ?><summary fileFormatVersion="101"><methods><method id="boolean hasWaiters(java.util.concurrent.locks.Condition)"><flows><flow isAlias="true"><from sourceSinkType="Return" BaseType="boolean" gap="4"></from><to sourceSinkType="Return" BaseType="boolean" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.locks.Condition"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject" gap="4"></to></flow></flows></method><method id="int getWaitQueueLength(java.util.concurrent.locks.Condition)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.locks.Condition"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject" gap="1"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="int" gap="1"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow></flows></method><method id="java.lang.String toString()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.locks.ReentrantLock" AccessPath="[&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread exclusiveOwnerThread&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock$Sync, java.lang.Thread]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Thread" gap="6"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.locks.ReentrantLock$Sync" AccessPath="[&lt;java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread exclusiveOwnerThread&gt;]" AccessPathTypes="[java.lang.Thread]" gap="6"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Thread" gap="6"></to></flow></flows></method><method id="java.lang.Object clone()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="java.util.concurrent.locks.Condition newCondition()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.locks.ReentrantLock" AccessPath="[&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock$Sync]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject" AccessPath="[&lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock$Sync]" taintSubFields="true"></to></flow></flows></method><method id="int getHoldCount()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.locks.ReentrantLock" AccessPath="[&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: int state&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock$Sync, int]"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow></flows></method><method id="boolean tryLock(long,java.util.concurrent.TimeUnit)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="long"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="long" gap="7" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.TimeUnit" gap="7"></from><to sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.util.concurrent.TimeUnit" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.util.concurrent.TimeUnit"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.TimeUnit" gap="7"></to></flow></flows></method><method id="java.util.Collection getQueuedThreads()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.locks.ReentrantLock" AccessPath="[&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail&gt;, &lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.lang.Thread thread&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock$Sync, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node, java.lang.Thread]"></from><to sourceSinkType="Return" BaseType="java.util.ArrayList" AccessPath="[&lt;java.util.ArrayList: java.lang.Object[] array&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.ArrayList" AccessPath="[&lt;java.util.ArrayList: java.lang.Object[] array&gt;]" AccessPathTypes="[java.lang.Object[]]"></from><to sourceSinkType="Return" BaseType="java.util.ArrayList" AccessPath="[&lt;java.util.ArrayList: java.lang.Object[] array&gt;]" AccessPathTypes="[java.lang.Object[]]" taintSubFields="true"></to></flow></flows></method><method id="boolean isFair()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.locks.ReentrantLock" AccessPath="[&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock$Sync]"></from><to sourceSinkType="Return" BaseType="boolean" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Thread getOwner()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.locks.ReentrantLock" AccessPath="[&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;, &lt;java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread exclusiveOwnerThread&gt;]" AccessPathTypes="[java.util.concurrent.locks.ReentrantLock$Sync, java.lang.Thread]"></from><to sourceSinkType="Return" BaseType="java.lang.Thread" taintSubFields="true"></to></flow></flows></method><method id="java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)"><flows><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.util.Collection" gap="3"></from><to sourceSinkType="Return" BaseType="java.util.Collection" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.locks.Condition"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject" gap="3"></to></flow></flows></method></methods><gaps><gap num="1" id="&lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int getWaitQueueLength()&gt;"></gap><gap num="3" id="&lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.Collection getWaitingThreads()&gt;"></gap><gap num="4" id="&lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: boolean hasWaiters()&gt;"></gap><gap num="6" id="&lt;java.lang.Thread: java.lang.String getName()&gt;"></gap><gap num="7" id="&lt;java.util.concurrent.TimeUnit: long toNanos(long)&gt;"></gap></gaps></summary>