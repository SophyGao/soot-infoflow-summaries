<?xml version="1.0" ?><summary fileFormatVersion="101"><methods><method id="boolean removeAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]" gap="9"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="9"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: int segmentShift&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="11" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentHashMap$HashEntry" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key&gt;]" AccessPathTypes="[java.lang.Object]" gap="11"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="11" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="11"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: int segmentMask&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="11" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="11" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="11"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="9"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="9"></to></flow></flows></method><method id="java.lang.String toString()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]" gap="17"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="17"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="17"></to></flow></flows></method><method id="java.lang.Object clone()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="int size()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: int count&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], int]"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment[]" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$Segment: int count&gt;]" AccessPathTypes="[int]" gap="2"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: int count&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], int]" gap="2"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="2"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]" gap="2"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="2"></to></flow></flows></method><method id="boolean retainAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: int segmentShift&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="13" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="13" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: int segmentMask&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="13" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentHashMap$HashEntry" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key&gt;]" AccessPathTypes="[java.lang.Object]" gap="13"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="13" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="13"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="13"></to></flow></flows></method><method id="java.util.Iterator iterator()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$KeyIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeyIterator: java.util.concurrent.ConcurrentHashMap this$0&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$KeyIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap this$0&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$KeyIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry nextEntry&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$HashEntry]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$KeyIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: int nextSegmentIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$KeyIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry[] currentTable&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$HashEntry[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$KeyIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: int nextTableIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object[] toArray()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]" gap="15"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="15"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="15"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow></flows></method><method id="boolean containsAll(java.util.Collection)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="12" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="12"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: int segmentMask&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="12" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentHashMap$HashEntry" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key&gt;]" AccessPathTypes="[java.lang.Object]" gap="12"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="12" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="12"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: int segmentShift&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="12" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object[] toArray(java.lang.Object[])"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]" gap="16"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="16"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: int count&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="16"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: int count&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], int]" gap="16"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment[]" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$Segment: int count&gt;]" AccessPathTypes="[int]" gap="16"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: int count&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], int]" gap="16"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment[]" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$Segment: int count&gt;]" AccessPathTypes="[int]" gap="16"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: int count&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], int]"></from><to sourceSinkType="Return" BaseType="java.lang.Object[]" taintSubFields="true"></to></flow></flows></method><method id="boolean equals(java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="5"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Set" gap="3"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Set" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: int segmentShift&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="8" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Set" gap="3"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]" gap="5"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="5"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.concurrent.ConcurrentHashMap$HashEntry" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key&gt;]" AccessPathTypes="[java.lang.Object]" gap="8"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="8" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Set" gap="3"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Set" gap="4"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="7"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="8"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: int segmentMask&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="8" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;, &lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap, java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="8" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.util.Iterator" gap="4"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="6"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="6"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="7"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="7"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="6"></to></flow></flows></method></methods><gaps><gap num="2" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="3" id="&lt;java.util.Set: int size()&gt;"></gap><gap num="4" id="&lt;java.util.Collection: java.util.Iterator iterator()&gt;"></gap><gap num="5" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="6" id="&lt;java.util.Iterator: boolean hasNext()&gt;"></gap><gap num="7" id="&lt;java.util.Iterator: java.lang.Object next()&gt;"></gap><gap num="8" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap><gap num="9" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="11" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap><gap num="12" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap><gap num="13" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap><gap num="15" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="16" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="17" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap></gaps></summary>