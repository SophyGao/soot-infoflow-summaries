<?xml version="1.0" ?><summary fileFormatVersion="101"><methods><method id="boolean remove(java.lang.Object,java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentShift&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="259"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.lang.Object"></from><to sourceSinkType="Parameter" ParameterIndex="2" BaseType="java.lang.Object" gap="259" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="2" BaseType="java.lang.Object" gap="259"></from><to sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="259"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentMask&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="259"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="259"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="259" taintSubFields="true"></to></flow></flows></method><method id="java.util.Enumeration keys()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$HashIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap this$0&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$KeyIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeyIterator: java.util.concurrent.ConcurrentHashMap this$0&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$HashIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: int nextTableIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$HashIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry[] currentTable&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$HashEntry[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$HashIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry nextEntry&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$HashEntry]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$HashIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: int nextSegmentIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;, &lt;java.util.concurrent.ConcurrentHashMap$HashEntry: int hash&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[], int]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentShift&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.lang.Object"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentMask&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object remove(java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentShift&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="258"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentMask&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="258"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="258"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="258"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="258" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="258"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object get(java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentShift&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentMask&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="java.util.Enumeration elements()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$HashIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap this$0&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$ValueIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$ValueIterator: java.util.concurrent.ConcurrentHashMap this$0&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$HashIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry[] currentTable&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$HashEntry[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$HashIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: int nextSegmentIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$HashIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: int nextTableIndex&gt;]" AccessPathTypes="[int]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$HashIterator" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashIterator: java.util.concurrent.ConcurrentHashMap$HashEntry nextEntry&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$HashEntry]" taintSubFields="true"></to></flow></flows></method><method id="int size()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: int count&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], int]"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$Segment: int count&gt;]" AccessPathTypes="[int]" gap="262"></from><to sourceSinkType="Return" BaseType="int" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="262"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="262"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object put(java.lang.Object,java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;, &lt;java.util.concurrent.ConcurrentHashMap$HashEntry: int hash&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[], int]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentShift&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentMask&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.lang.Object"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow></flows></method><method id="boolean containsValue(java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="249"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="247"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="248"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="247"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="248"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="249"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="249"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="248"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="248"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="247"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="247"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="248"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="249"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="247"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="247"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="249"></to></flow></flows></method><method id="boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="3" BaseType="java.lang.Object" gap="261"></from><to sourceSinkType="Parameter" ParameterIndex="2" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="2" BaseType="java.lang.Object"></from><to sourceSinkType="Parameter" ParameterIndex="3" BaseType="java.lang.Object" gap="261" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="261"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="2" BaseType="java.lang.Object" gap="261"></from><to sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.lang.Object"></from><to sourceSinkType="Parameter" ParameterIndex="2" BaseType="java.lang.Object" gap="261" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentMask&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="261"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentShift&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="261"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="261"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="261" taintSubFields="true"></to></flow></flows></method><method id="java.util.Collection values()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$Values" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$Values: java.util.concurrent.ConcurrentHashMap this$0&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.Collection values&gt;]" AccessPathTypes="[java.util.Collection]"></from><to sourceSinkType="Return" BaseType="java.util.Collection" taintSubFields="true"></to></flow></flows></method><method id="boolean equals(java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Map" gap="266"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Map" gap="265"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Map" gap="265"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Map" gap="266"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="264"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Map" gap="266"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Map" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="266"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="265"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="264"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="265" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Map" gap="265"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Map" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="264"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="265" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="265"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="266" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Map" gap="263"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Map" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="263"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Map" gap="263"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Map" gap="265"></to></flow></flows></method><method id="java.lang.String toString()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="269"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="268"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$Segment: int count&gt;]" AccessPathTypes="[int]" gap="268"></from><to sourceSinkType="Return" BaseType="java.lang.String" AccessPath="[&lt;java.lang.String: char[] value&gt;]" AccessPathTypes="[char[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="269"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: int count&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], int]"></from><to sourceSinkType="Return" BaseType="java.lang.String" AccessPath="[&lt;java.lang.String: char[] value&gt;]" AccessPathTypes="[char[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.String" AccessPath="[&lt;java.lang.String: char[] value&gt;]" AccessPathTypes="[char[]]" gap="269"></from><to sourceSinkType="Return" BaseType="java.lang.String" AccessPath="[&lt;java.lang.String: char[] value&gt;]" AccessPathTypes="[char[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="268"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="269"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="268"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$HashEntry[]]" gap="268"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="269"></to></flow></flows></method><method id="void putAll(java.util.Map)"><flows><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="254"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="256"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$HashEntry" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashEntry: int hash&gt;]" AccessPathTypes="[int]" gap="256"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="256" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$HashEntry" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashEntry: int hash&gt;]" AccessPathTypes="[int]" gap="256"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="257" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$HashEntry" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashEntry: int hash&gt;]" AccessPathTypes="[int]" gap="257"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="256" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$HashEntry" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$HashEntry: int hash&gt;]" AccessPathTypes="[int]" gap="257"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="257" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="254"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="257"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="252"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="253"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Map" gap="250"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Map" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Iterator" gap="253"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="252"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.util.Set" gap="250"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Set" gap="251"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="253"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="254"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentMask&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="256" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentMask&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="257" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="253"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="255"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="256"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="257" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="256"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="257" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="257"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="256" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="257"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="257" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="255"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="257" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="256"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="256" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="255"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="256" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="254"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="256" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="254"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="257" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="256"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="257"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.util.Map"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Map" gap="250"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="256"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="256"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="256"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="257"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.lang.Object" gap="257"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="256"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.Map$Entry" gap="254"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Map$Entry" gap="255"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;, &lt;java.util.concurrent.ConcurrentHashMap$HashEntry: int hash&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[], int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="256" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;, &lt;java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table&gt;, &lt;java.util.concurrent.ConcurrentHashMap$HashEntry: int hash&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[], java.util.concurrent.ConcurrentHashMap$HashEntry[], int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="257" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.util.Iterator" gap="251"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.Iterator" gap="252"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentShift&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="257" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentShift&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="256" taintSubFields="true"></to></flow></flows></method><method id="java.lang.Object replace(java.lang.Object,java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Return" BaseType="java.lang.Object" gap="260"></from><to sourceSinkType="Return" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="260" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" gap="260"></from><to sourceSinkType="Parameter" ParameterIndex="0" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentMask&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="260"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="260"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: int segmentShift&gt;]" AccessPathTypes="[int]"></from><to sourceSinkType="GapBaseObject" BaseType="java.lang.Object" gap="260"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="2" BaseType="java.lang.Object" gap="260"></from><to sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.lang.Object" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Parameter" ParameterIndex="1" BaseType="java.lang.Object"></from><to sourceSinkType="Parameter" ParameterIndex="2" BaseType="java.lang.Object" gap="260" taintSubFields="true"></to></flow></flows></method><method id="java.util.Set entrySet()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap"></from><to sourceSinkType="Return" BaseType="java.util.Set" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$EntrySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$EntrySet: java.util.concurrent.ConcurrentHashMap this$0&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap]" taintSubFields="true"></to></flow></flows></method><method id="java.util.Set keySet()"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap"></from><to sourceSinkType="Return" BaseType="java.util.concurrent.ConcurrentHashMap$KeySet" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap$KeySet: java.util.concurrent.ConcurrentHashMap this$0&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap"></from><to sourceSinkType="Return" BaseType="java.util.Set" taintSubFields="true"></to></flow></flows></method><method id="boolean contains(java.lang.Object)"><flows><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="245"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="244"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="244"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="245"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="245"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="246"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="246"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="245"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="244"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="246"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="246"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="244"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="246"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="245"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="244"></from><to sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]" taintSubFields="true"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="246"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="244"></to></flow><flow isAlias="true"><from sourceSinkType="Field" BaseType="java.util.concurrent.ConcurrentHashMap" AccessPath="[&lt;java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments&gt;]" AccessPathTypes="[java.util.concurrent.ConcurrentHashMap$Segment[]]"></from><to sourceSinkType="GapBaseObject" BaseType="java.util.concurrent.ConcurrentHashMap$Segment" gap="245"></to></flow></flows></method></methods><gaps><gap num="256" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap><gap num="257" id="&lt;java.lang.Object: boolean equals(java.lang.Object)&gt;"></gap><gap num="258" id="&lt;java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object)&gt;"></gap><gap num="259" id="&lt;java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object)&gt;"></gap><gap num="260" id="&lt;java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object replace(java.lang.Object,int,java.lang.Object)&gt;"></gap><gap num="261" id="&lt;java.util.concurrent.ConcurrentHashMap$Segment: boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)&gt;"></gap><gap num="262" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="263" id="&lt;java.util.Map: int size()&gt;"></gap><gap num="264" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="265" id="&lt;java.util.Map: java.lang.Object get(java.lang.Object)&gt;"></gap><gap num="266" id="&lt;java.util.Map: boolean containsKey(java.lang.Object)&gt;"></gap><gap num="268" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="269" id="&lt;java.lang.Object: java.lang.String toString()&gt;"></gap><gap num="244" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="245" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="246" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="247" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="248" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="249" id="&lt;java.util.concurrent.locks.ReentrantLock: void unlock()&gt;"></gap><gap num="250" id="&lt;java.util.Map: java.util.Set entrySet()&gt;"></gap><gap num="251" id="&lt;java.util.Set: java.util.Iterator iterator()&gt;"></gap><gap num="252" id="&lt;java.util.Iterator: boolean hasNext()&gt;"></gap><gap num="253" id="&lt;java.util.Iterator: java.lang.Object next()&gt;"></gap><gap num="254" id="&lt;java.util.Map$Entry: java.lang.Object getKey()&gt;"></gap><gap num="255" id="&lt;java.util.Map$Entry: java.lang.Object getValue()&gt;"></gap></gaps></summary>